// Generated by CoffeeScript 1.10.0
(function() {
  var Address, Checkout, Hawk, Prey, Progress, Validation, View, delay,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Address = (function() {
    function Address() {
      $('.gui-form-country').live('change', (function(_this) {
        return function(Event) {
          return _this.render($(Event.currentTarget));
        };
      })(this));
      $('.gui-form-zipcode').live('change keyup', (function(_this) {
        return function(Event) {
          return _this.autocomplete($(Event.currentTarget));
        };
      })(this));
      $('.gui-form-country').each((function(_this) {
        return function(index, value) {
          return _this.render($(value));
        };
      })(this));
    }

    Address.prototype.autocomplete = function(element) {
      var country, parent, request, url;
      parent = this.parent = element.parents('div[data-address]');
      country = gui_countries[parent.find('.gui-form-country').val()];
      url = parent.parents('*[data-url-autocomplete]').data('url-autocomplete');
      if (country) {
        if (country.type === 'autocomplete') {
          if (parent.find('.gui-form-zipcode').val().length > 3) {
            request = url.replace('_country_', escape(parent.find('.gui-form-country').val()));
            request = request.replace('_zipcode_', escape(parent.find('.gui-form-zipcode').val()));
            request = request.replace('_number_', escape(parent.find('.gui-form-number').val()));
            return $.getJSON(request, (function(_this) {
              return function(response) {
                _this.parent.find('.gui-form-streetname').val(response.streetname);
                _this.parent.find('.gui-form-city').val(response.city);
                _this.parent.find('.gui-form-region input').val(response.region);
                return _this.parent.find('.gui-form-region select option').filter(function() {
                  return $(this).text() === response.region;
                }).prop('selected', true);
              };
            })(this));
          }
        }
      }
    };

    Address.prototype.render = function(element) {
      var address2Element, country, numberElement, numberExtensionElement, parent, previousCountryType, regionInput, regionPicker, regionSelect, selectedCountry, url, zipcodeElement, zipcodeField;
      parent = this.parent = element.parents('div[data-address]');
      country = gui_countries[element.val()];
      previousCountryType = parent.find('.gui-address-format').val();
      if (country) {
        parent.removeClass('gui-format-default gui-format-autocomplete gui-format-international');
        parent.addClass("gui-format-" + country.type);
        parent.find('.gui-address-format').val(country.type);
        if (previousCountryType === 'autocomplete' || country.type === 'autocomplete') {
          this.flipZipcode(parent);
        }
        zipcodeElement = parent.find('.gui-form-zipcode');
        zipcodeField = zipcodeElement.closest('.gui-field');
        if (country.zipcode) {
          zipcodeElement.addClass('gui-validate');
          zipcodeField.removeClass('gui-no-validate');
        } else {
          zipcodeElement.removeClass('gui-validate');
          zipcodeField.addClass('gui-no-validate');
        }
        numberElement = parent.find('.gui-form-number');
        numberExtensionElement = parent.find('.gui-form-number-ext');
        address2Element = parent.find('.gui-form-streetname2');
        if (country.type !== 'international') {
          numberElement.addClass('gui-validate');
          address2Element.val('');
        } else {
          numberElement.val('').removeClass('gui-validate');
          numberExtensionElement.val('');
        }
        if (country.code === 'be') {
          this.setLabel('.gui-address-number-ext', 'Bus');
        } else {
          this.setLabel('.gui-address-number-ext', 'Extension');
        }
        if (country.type === 'international') {
          this.setLabel('.gui-address-streetname', 'Address');
        } else if (previousCountryType === 'international') {
          this.setLabel('.gui-address-streetname', 'Street name');
        }
        regionPicker = parent.find('.gui-form-region');
        regionSelect = regionPicker.find('.gui-select');
        regionInput = regionPicker.find('.gui-input');
        selectedCountry = regionPicker.data('selected-country');
        if (country.has_regions) {
          regionSelect.show().find('.gui-no-validate').toggleClass('gui-no-validate gui-validate');
          regionInput.hide().find('.gui-validate').toggleClass('gui-validate gui-no-validate');
          if (selectedCountry !== element.val()) {
            url = parent.parents('*[data-url-regions]').data('url-regions');
            url = url.replace('_country_', escape(element.val()));
            regionPicker.data('selected-country', element.val());
            return $.getJSON(url, (function(_this) {
              return function(response) {
                var i, ref, region, selectElement;
                selectElement = regionSelect.find('select');
                selectElement.find('option').remove();
                if (response.regions) {
                  ref = response.regions;
                  for (i in ref) {
                    region = ref[i];
                    selectElement.append("<option value='" + region.id + "'>" + region.name + "</option>");
                  }
                }
                return gui_select_values();
              };
            })(this));
          }
        } else {
          regionSelect.hide().find('.gui-validate').toggleClass('gui-validate gui-no-validate');
          regionInput.show().find('.gui-no-validate').toggleClass('gui-no-validate gui-validate');
          return regionSelect.find('option').remove();
        }
      }
    };

    Address.prototype.flipZipcode = function(parent) {
      var elmRow1, elmRow2, htmlRow1, htmlRow2, valRow1, valRow2;
      elmRow1 = parent.find('.gui-address-row-1 .gui-col2-equal-col1');
      elmRow2 = parent.find('.gui-address-row-2 .gui-col2-equal-col1');
      htmlRow1 = elmRow1.html();
      htmlRow2 = elmRow2.html();
      valRow1 = elmRow1.find('input').first().val();
      valRow2 = elmRow2.find('input').first().val();
      elmRow1.html(htmlRow2);
      elmRow2.html(htmlRow1);
      elmRow1.find('input').first().val(valRow2);
      return elmRow2.find('input').first().val(valRow1);
    };

    Address.prototype.setLabel = function(selector, label) {
      this.parent.find(selector + "-label").html(gui_translate(label));
      return this.parent.find(selector).attr('placeholder', gui_translate(label));
    };

    return Address;

  })();

  Checkout = (function() {
    function Checkout() {
      this.update = bind(this.update, this);
      this.object = $('*[data-checkout]');
      this.compatability();
      $(document).ready(function() {
        return window.Checkout.init();
      });
    }

    Checkout.prototype.init = function() {
      this.options();
      this.view = new View;
      this.validation = new Validation;
      this.progress = new Progress;
      this.address = new Address;
      if ($.support.leadingWhitespace === true) {
        this.hawk = new Hawk;
      }
      this.display();
      return this.focus();
    };

    Checkout.prototype.display = function() {
      this.object.removeClass('gui-invisible');
      return $('#gui-checkout-loading').hide();
    };

    Checkout.prototype.options = function() {
      return this.realtime = this.object.data('realtime');
    };

    Checkout.prototype.progress = function() {
      return this.progressbar = $('*[data-progressbar]');
    };

    Checkout.prototype.focus = function() {
      return this.object.find('input[type!=hidden]:visible, select:visible').first().focus();
    };

    Checkout.prototype.update = function(section) {
      var data, url;
      if (typeof section === 'string') {
        section = $(".gui-section[data-name='" + section + "']");
      }
      url = this.url() + section.data('name') + '/';
      this.request_id = Math.random().toString(36).substring(7);
      data = this.currentData() + '&request_id=' + this.request_id;
      return $.post(url, data, (function(_this) {
        return function(data) {
          _this.object.find('.gui-loading').removeClass('gui-loading');
          $('.gui-error').removeClass('gui-error');
          $('.gui-message').remove();
          if (data.status === 'success') {
            if (data.request_id === _this.request_id) {
              if (data.content) {
                return $.each(data.content, function(key, value) {
                  return _this.view.replace(key, value);
                });
              }
            }
          } else {
            if (data.errors) {
              return $.each(data.errors, function(key, value) {
                var element, parts;
                parts = key.split('.');
                parts.pop();
                element = $('#gui-form-' + parts.join('-'));
                if (element.length > 0) {
                  if (element.is('div')) {
                    return element.prepend("<div class='gui-message'>" + value + "</div>").addClass('gui-error');
                  } else {
                    return element.parent().addClass('gui-validate-error').parent().append('<div class="gui-message">' + value + '</div>').addClass('gui-error');
                  }
                }
              });
            }
          }
        };
      })(this), 'json');
    };

    Checkout.prototype.url = function() {
      return this.object.data('url');
    };

    Checkout.prototype.currentData = function() {
      return this.object.find('input, select, textarea').serialize();
    };

    Checkout.prototype.compatability = function() {
      if (typeof $.prototype.prop === "undefined") {
        jQuery.fn.extend({
          prop: function(variable, value) {
            jQuery(this).attr(variable, value);
            return this;
          }
        });
      }
      if (window.navigator.userAgent.indexOf("MSIE ") > 0) {
        return $('label img').live('click', function() {
          var element, parent;
          parent = $(this).parents('label');
          element = $('#' + parent.attr('for'));
          parent.trigger('click');
          return element.trigger('change');
        });
      }
    };

    return Checkout;

  })();

  window.Checkout = new Checkout();

  Hawk = (function() {
    function Hawk() {
      this.init();
    }

    Hawk.prototype.init = function() {
      this.find();
      this.hunting();
      $(window).trigger('scroll');
      return $(window).resize((function(_this) {
        return function() {
          return _this.find();
        };
      })(this));
    };

    Hawk.prototype.find = function() {
      this.preys = new Array();
      return $('*[data-hawk]:visible').each((function(_this) {
        return function(index, element) {
          return _this.register(element);
        };
      })(this));
    };

    Hawk.prototype.hunting = function() {
      return $(window).scroll((function(_this) {
        return function() {
          var data, j, len, prey, ref, results;
          data = {
            'scrollTop': $(window).scrollTop()
          };
          ref = _this.preys;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            prey = ref[j];
            results.push(prey.update(data));
          }
          return results;
        };
      })(this));
    };

    Hawk.prototype.notify = function(section) {
      if (section.length > 0) {
        return section.find('*[data-hawk]').each((function(_this) {
          return function(index, element) {
            return _this.register(element);
          };
        })(this));
      }
    };

    Hawk.prototype.register = function(element) {
      var action, offsetBottom, offsetTop, prey;
      element = $(element);
      action = element.data('hawk');
      offsetTop = element.data('offset-top');
      offsetBottom = element.data('offset-bottom');
      prey = new Prey(element, action, offsetTop, offsetBottom);
      if (prey.isValid()) {
        return this.preys.push(prey);
      }
    };

    return Hawk;

  })();

  Prey = (function() {
    function Prey(element1, action1, offsetTop1, offsetBottom1) {
      this.element = element1;
      this.action = action1;
      this.offsetTop = offsetTop1;
      this.offsetBottom = offsetBottom1;
      this.prev = this.element.prev();
      if (this.offsetTop && this.offsetTop.length > 0) {
        if (this.offsetTop.match(/^[0-9]+$/)) {
          this.offsetTop = parseInt(this.offsetTop);
        } else {
          this.offsetTop = $(this.offsetTop).outerHeight(true);
        }
      }
      if (this.offsetBottom && this.offsetBottom.length > 0) {
        this.offsetBottomElement = $(this.offsetBottom);
        this.offsetBottom = $(this.offsetBottom).height();
        this.offsetBottomPosition = this.offsetBottomElement.position().top;
        $('input, select').live('change', (function(_this) {
          return function() {
            return _this.offsetBottom = _this.offsetBottomElement.height();
          };
        })(this));
      }
      this.windowHeight = $(window).height();
      this.parentTop = this.element.parent().offset().top;
      this.top = this.element.offset().top;
      if (this.offsetTop) {
        this.top -= this.offsetTop;
      }
      this.width = this.element.parent().width();
      this.margin = parseInt(this.prev.css("margin-bottom"));
    }

    Prey.prototype.update = function() {
      var height, offsetBottomTop, scrollTop;
      scrollTop = $(window).scrollTop();
      if (this.action === "static") {
        if (this.offsetBottom && this.offsetBottom < ((this.element.offset().top - this.parentTop) + this.element.height())) {
          if (this.element.hasClass("gui-absolute") === false) {
            offsetBottomTop = (this.offsetBottom - this.element.height()) + this.offsetBottomPosition;
            return this.element.removeClass('gui-fixed').addClass('gui-absolute').css("top", offsetBottomTop);
          }
        } else if (scrollTop > this.top) {
          if (this.element.hasClass("gui-fixed") === false && this.element.hasClass("gui-absolute") === false) {
            height = this.element.height() + parseInt(this.element.css("margin-bottom")) + parseInt(this.element.children().css("margin-bottom")) + this.margin;
            this.prev.css("margin-bottom", height);
            this.element.addClass("gui-fixed").width(this.width);
            this.element.css("top", this.offsetTop);
          }
          if (this.offsetBottom) {
            if ((this.element.offset().top - scrollTop) > this.offsetTop) {
              this.element.removeClass('gui-absolute').addClass("gui-fixed");
              return this.element.css("top", this.offsetTop);
            }
          }
        } else {
          if (this.element.hasClass("gui-fixed")) {
            this.element.removeClass("gui-fixed").width("auto");
            return this.prev.css("margin-bottom", this.margin);
          }
        }
      } else if (this.action === "visible") {
        if (this.element.hasClass('gui-fixed') === false && this.element.parents('.gui-inactive').length === 0 && $(window).width() > 768 && (scrollTop + this.windowHeight) < (this.top + this.element.outerHeight(true))) {
          return this.element.addClass('gui-fixed');
        } else if (this.element.hasClass('gui-fixed') === true) {
          if (((scrollTop + this.windowHeight) - (this.top + this.element.outerHeight(true))) > 30) {
            return this.element.removeClass('gui-fixed');
          }
        }
      }
    };

    Prey.prototype.getTop = function() {
      if (this.offsetTop) {
        return this.element.offset().top - this.getOffsetTop();
      }
      return this.element.offset().top;
    };

    Prey.prototype.getWidth = function() {
      return this.element.width();
    };

    Prey.prototype.getHeight = function(margins) {
      if (margins) {
        return this.getHeight() + parseInt(this.element.css('margin-bottom')) + parseInt(this.element.children().css('margin-bottom')) + parseInt(this.element.prev().css('margin-bottom'));
      }
      return parseInt(this.element.height());
    };

    Prey.prototype.getOffsetTop = function() {
      if (this.offsetTop && this.offsetTop.length > 0) {
        if (this.offsetTop.match(/^[0-9]+$/)) {
          return parseInt(this.offsetTop);
        } else {
          return $(this.offsetTop).outerHeight(true);
        }
      }
    };

    Prey.prototype.getOffsetBottom = function() {
      return $(this.offsetBottom).height();
    };

    Prey.prototype.getOffsetBottomPosition = function() {
      return $(this.offsetBottom).position().top;
    };

    Prey.prototype.getOffsetBottomTop = function() {
      return (this.getOffsetBottom() - this.getHeight()) + this.getOffsetBottomPosition();
    };

    Prey.prototype.getWindowHeight = function() {
      return $(window).height();
    };

    Prey.prototype.getParentTop = function() {
      return this.element.parent().offset().top;
    };

    Prey.prototype.getScrollTop = function() {
      return this.data.scrollTop;
    };

    Prey.prototype.isValid = function() {
      return true;
    };

    Prey.prototype.timeToStartScrolling = function() {
      return this.getScrollTop() > this.getTop();
    };

    Prey.prototype.bottomIsOverlapping = function() {
      return this.getOffsetBottom() && this.getOffsetBottom() < ((this.getOffsetTop() - this.getParentTop()) + this.getHeight());
    };

    return Prey;

  })();

  Progress = (function() {
    function Progress() {
      this.paginate = bind(this.paginate, this);
      this.Checkout = window.Checkout;
      this.init();
    }

    Progress.prototype.init = function() {
      this.items = new Array();
      $.each(this.Checkout.object.find('.gui-step:visible'), (function(_this) {
        return function(index, element) {
          var section, sectionName;
          element = $(element);
          if (element.hasClass('gui-section')) {
            section = element;
          } else {
            section = element.find('.gui-section');
          }
          sectionName = section.data('name');
          if (element.hasClass('gui-inactive') === !true) {
            _this.active = sectionName;
            _this.index = index;
          }
          return _this.items.push({
            key: sectionName,
            value: section
          });
        };
      })(this));
      if (window.location.hash !== '') {
        this.scrollTo(window.location.hash);
      }
      return this.initEvents();
    };

    Progress.prototype.initEvents = function() {
      if (indexOf.call(window, "onhashchange") >= 0) {
        window.onhashchange = this.scrollTo;
      } else {
        $('a').live('click', (function(_this) {
          return function(Event) {
            var anchor, href;
            anchor = $(Event.currentTarget);
            href = anchor.attr('href');
            if (href.match(/^#/)) {
              return _this.scrollTo(href);
            }
          };
        })(this));
      }
      return $('a[data-action]').click(this.paginate);
    };

    Progress.prototype.paginate = function(Event) {
      var action, element, step, target;
      Event.preventDefault();
      element = $(Event.currentTarget);
      step = element.parents('.gui-step');
      action = element.data('action');
      target = element.data('target');
      if (target) {
        element = $(target);
      } else {
        if (action === 'next') {
          element = step.nextAll('.gui-step:visible').first();
        } else {
          element = step.prevAll('.gui-step:visible').first();
        }
      }
      if (element.length > 0) {
        return this.scrollTo(element.attr('id'));
      }
    };

    Progress.prototype.next = function() {
      return this.items[this.index += 1];
    };

    Progress.prototype.previous = function() {
      return this.items[this.index -= 1];
    };

    Progress.prototype.reset = function() {
      return this.index = 0;
    };

    Progress.prototype.getNext = function(section) {
      var next;
      next = false;
      $.each(this.items, (function(_this) {
        return function(key, value) {
          if (value.key === section.data('name')) {
            return next = key + 1;
          }
        };
      })(this));
      if (this.items[next]) {
        return {
          index: next,
          item: this.items[next]
        };
      }
      return false;
    };

    Progress.prototype.isEnabled = function() {
      if (this.items.length > 0) {
        return true;
      }
      return false;
    };

    Progress.prototype.isDone = function(step) {
      var element;
      element = this.find(step.key);
      return element.hasClass('gui-done');
    };

    Progress.prototype.done = function(section) {
      var next;
      this.strip(section).addClass('gui-done');
      next = this.getNext(section);
      if (next && this.isDone(next.item) === false) {
        return this.activate(next.item.value);
      }
    };

    Progress.prototype.invalid = function(section) {
      return this.strip(section).addClass('gui-invalid');
    };

    Progress.prototype.activate = function(section) {
      return this.strip(section).addClass('gui-active');
    };

    Progress.prototype.find = function(section) {
      return $(".step-" + section);
    };

    Progress.prototype.strip = function(section) {
      section = this.find(section.data('name'));
      $.each(section, function(index, element) {
        return element.className = element.className.replace(/\bgui-(done|active|invalid|inactive|step-)\b/g, '');
      });
      return section;
    };

    Progress.prototype.scrollTo = function(hash) {
      var element, offset, selector;
      hash = typeof hash === 'string' ? hash : window.location.hash;
      hash = hash.match(/^#/) ? hash.substring(1) : hash;
      selector = hash.match(/gui/) ? hash : 'gui-block-' + hash;
      if (selector.match(/^([a-zA-Z\-]+)$/)) {
        element = $('#' + selector);
        offset = $('.gui-progressbar').outerHeight(true);
        if (element.length > 0) {
          offset = element.offset().top - offset;
          return $('html, body').animate({
            scrollTop: offset
          }, 'slow');
        }
      }
    };

    return Progress;

  })();

  Validation = (function() {
    var last_submit;

    last_submit = 0;

    function Validation() {
      this.validate = bind(this.validate, this);
      this.Checkout = window.Checkout;
      this.events();
    }

    Validation.prototype.events = function() {
      var onCheckoutItemsChange;
      this.Checkout.object.find('form#gui-form').submit((function(_this) {
        return function(Event) {
          return _this.sections($(Event.currentTarget).parents('*[data-checkout]').find('.gui-section[data-validation="required"]:visible'), true);
        };
      })(this));
      onCheckoutItemsChange = (function(_this) {
        return function(Event) {
          var element, section, validateBeforeUpdate;
          if (Event.keyCode && (Event.keyCode === 9 || Event.keyCode === 16)) {
            return false;
          }
          element = $(Event.currentTarget);
          _this.validate(element, true);
          if (Event.type === 'change') {
            _this.broadcast(element);
          }
          if (_this.Checkout.realtime) {
            section = element.parents('.gui-section');
            if (section.length > 0) {
              validateBeforeUpdate = typeof element.data('validate-before-update') !== 'undefined' ? element.data('validate-before-update') : true;
              if (validateBeforeUpdate) {
                if (_this.section(section.data('name'), false)) {
                  return delay((function() {
                    element.addClass('gui-loading');
                    return _this.Checkout.update(section);
                  }), 600);
                }
              } else {
                return delay((function() {
                  element.addClass('gui-loading');
                  return _this.Checkout.update(section);
                }), 600);
              }
            }
          }
        };
      })(this);
      this.Checkout.object.find('input, select').live('change keyup', onCheckoutItemsChange);
      return this.Checkout.object.find('textarea').live('change', onCheckoutItemsChange);
    };

    Validation.prototype.broadcast = function(element) {
      var data, name;
      name = element.attr('name');
      data = element.data();
      data['value'] = element.val();
      if (name === 'payment_method') {
        return $(window).trigger('checkout:payment:changed', data);
      } else if (name === 'shipment_method') {
        return $(window).trigger('checkout:shipment:changed', data);
      }
    };

    Validation.prototype.validate = function(element, visible) {
      if (element) {
        if (element.hasClass('gui-validate')) {
          if (element.hasClass('gui-section')) {
            if (element.find('.gui-field input:checked, input[name="shipment_method"]:checked, input[name="payment_method"]:checked').length === 0) {
              if (visible) {
                this.add(element);
              }
              return false;
            } else {
              if (visible) {
                this.remove(element);
              }
            }
          } else if (element.is(':checkbox')) {
            if (element.not(':checked').length > 0) {
              if (visible) {
                this.add(element);
              }
              return false;
            } else {
              if (visible) {
                this.remove(element);
              }
            }
          } else {
            if (element.val() === '') {
              if (visible) {
                this.add(element);
              }
              return false;
            } else {
              if (visible) {
                this.remove(element);
              }
            }
          }
        }
      }
      return true;
    };

    Validation.prototype.section = function(section, visible) {
      var elements, errors;
      errors = 0;
      if (typeof section === 'string') {
        section = $(".gui-section[data-name='" + section + "']");
      }
      elements = section.find('.gui-validate');
      if (elements.length > 0) {
        $.each(elements, (function(_this) {
          return function(index, element) {
            if (_this.validate($(element), visible) === !true) {
              return errors++;
            }
          };
        })(this));
      } else {
        if (this.validate(section, visible) === !true) {
          errors++;
        }
      }
      if (errors > 0) {
        if (this.Checkout.progress.isEnabled() && visible === true) {
          this.Checkout.progress.invalid(section);
        }
        return false;
      }
      if (this.Checkout.progress.isEnabled()) {
        this.Checkout.progress.done(section);
      }
      return true;
    };

    Validation.prototype.sections = function(sections, visible) {
      var current_time, errors;
      errors = 0;
      $.each(sections, (function(_this) {
        return function(index, section) {
          if (_this.section($(section).data('name'), visible) === !true) {
            return errors++;
          }
        };
      })(this));
      if (errors > 0) {
        return false;
      } else {
        current_time = new Date().getTime();
        if (last_submit > (current_time - 10000)) {
          return false;
        }
        last_submit = current_time;
      }
      return true;
    };

    Validation.prototype.add = function(element) {
      var error, parent, target;
      if (element.not('.gui-validate-error')) {
        element.addClass('gui-validate-error');
        parent = element.parents('.gui-field');
        target = parent.length > 0 ? parent : element;
        error = element.data('error');
        if (error) {
          this.remove(target);
          if (target.is('.gui-section')) {
            target.prepend($('<div/>').addClass('gui-message').text(error)).show();
          } else {
            target.append($('<div/>').addClass('gui-message').text(error)).show();
          }
        }
        return target.addClass('gui-error');
      }
    };

    Validation.prototype.remove = function(element) {
      var parent;
      if (element.hasClass('gui-validate-error')) {
        element.removeClass('gui-validate-error');
        parent = element.parents('.gui-field');
        element = parent.length > 0 ? parent : element;
        return element.removeClass('gui-error').find('.gui-message').remove();
      }
    };

    return Validation;

  })();

  delay = (function() {
    var timer;
    timer = 0;
    return function(callback, ms) {
      clearTimeout(timer);
      timer = setTimeout(callback, ms);
    };
  })();

  View = (function() {
    function View() {
      this.parse = bind(this.parse, this);
      this.Checkout = window.Checkout;
      this.render();
    }

    View.prototype.render = function() {
      this.Checkout.object.find('*[data-toggle]').each(this.parse).live('change', this.parse);
      return this.Checkout.object.find('[name="payment_method"]').live('change', this.payment);
    };

    View.prototype.replace = function(section, content) {
      var element;
      if (typeof section === 'string') {
        section = $(".gui-section[data-name='" + section + "']");
      }
      element = section;
      element.html(content);
      if (section.length > 0) {
        if (this.Checkout.validation.section(section, false)) {
          this.Checkout.progress.done(section);
        }
      }
      if (this.Checkout.hawk) {
        this.Checkout.hawk.notify(section);
      }
      return gui_select_values();
    };

    View.prototype.payment = function() {
      var element;
      element = $(this);
      window.Checkout.object.find('.gui-payment-method.gui-is-selected').removeClass('gui-is-selected');
      element.parents('.gui-payment-method').addClass('gui-is-selected');
      element.parents('.gui-section').addClass('gui-has-selected');
      window.Checkout.object.find('.gui-payment-method .gui-validate').removeClass('gui-validate').addClass('gui-validate-optional');
      return window.Checkout.object.find('.gui-payment-method.gui-is-selected .gui-validate-optional').removeClass('gui-validate-optional').addClass('gui-validate');
    };

    View.prototype.parse = function(index, element) {
      element = element ? $(element) : $(index.target);
      if (element.data('toggle') === 'option') {
        return this.parseOption(element);
      } else {
        return this.parseElement(element);
      }
    };

    View.prototype.parseOption = function(element) {
      var parent, selector, target;
      parent = element.closest('.gui-section');
      selector = element.data('target');
      target = parent.find(selector);
      parent.find('.gui-field input:not(:checked)').closest('.gui-section').find(selector).addClass('gui-hide').find('.gui-validate-optional').removeClass('gui-validate');
      if (element.is(':checked')) {
        target.removeClass('gui-hide');
        return target.find('.gui-validate-optional').addClass('gui-validate');
      } else {
        target.addClass('gui-hide');
        return parent.find('.gui-validate-optional').removeClass('gui-validate');
      }
    };

    View.prototype.parseElement = function(element) {
      var button, selected, target, visible;
      target = $(element.data('target'));
      button = typeof element.data('button') !== 'undefined' ? $(element.data('button')) : false;
      selected = element.is('select') ? element.find(':selected') : element.is(':checked') ? element : false;
      if (selected && button) {
        button.text(element.data('message'));
      }
      if (selected && target) {
        visible = selected.data('visible');
        if (visible) {
          target.removeClass('gui-hide');
          return target.find('.gui-not-validate').removeClass('gui-not-validate').addClass('gui-validate');
        } else {
          target.addClass('gui-hide');
          return target.find('.gui-validate').removeClass('gui-validate').addClass('gui-not-validate');
        }
      }
    };

    return View;

  })();

}).call(this);